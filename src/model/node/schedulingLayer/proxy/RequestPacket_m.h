//
// Generated file, do not edit! Created by opp_msgc 4.3 from model/node/schedulingLayer/proxy/RequestPacket.msg.
//

#ifndef _REQUESTPACKET_M_H_
#define _REQUESTPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "SchedulingPacket.h"
typedef double bklg_t;
typedef double rate_t;
// }}



/**
 * Class generated from <tt>model/node/schedulingLayer/proxy/RequestPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet RequestPacket extends SchedulingPacket {
 *     @customize(true);
 *     schedPktType = SCHEDULING_REQUEST; 
 *     rate_t request;	
 *     bklg_t bklg;	
 * }
 * </pre>
 *
 * RequestPacket_Base is only useful if it gets subclassed, and RequestPacket is derived from it.
 * The minimum code to be written for RequestPacket is the following:
 *
 * <pre>
 * class RequestPacket : public RequestPacket_Base
 * {
 *   private:
 *     void copy(const RequestPacket& other) { ... }

 *   public:
 *     RequestPacket(const char *name=NULL, int kind=0) : RequestPacket_Base(name,kind) {}
 *     RequestPacket(const RequestPacket& other) : RequestPacket_Base(other) {copy(other);}
 *     RequestPacket& operator=(const RequestPacket& other) {if (this==&other) return *this; RequestPacket_Base::operator=(other); copy(other); return *this;}
 *     virtual RequestPacket *dup() const {return new RequestPacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from RequestPacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(RequestPacket);
 * </pre>
 */
class RequestPacket_Base : public ::SchedulingPacket
{
  protected:
    rate_t request_var;
    bklg_t bklg_var;

  private:
    void copy(const RequestPacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RequestPacket_Base&);
    // make constructors protected to avoid instantiation
    RequestPacket_Base(const char *name=NULL, int kind=0);
    RequestPacket_Base(const RequestPacket_Base& other);
    // make assignment operator protected to force the user override it
    RequestPacket_Base& operator=(const RequestPacket_Base& other);

  public:
    virtual ~RequestPacket_Base();
    virtual RequestPacket_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class RequestPacket");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual rate_t& getRequest();
    virtual const rate_t& getRequest() const {return const_cast<RequestPacket_Base*>(this)->getRequest();}
    virtual void setRequest(const rate_t& request);
    virtual bklg_t& getBklg();
    virtual const bklg_t& getBklg() const {return const_cast<RequestPacket_Base*>(this)->getBklg();}
    virtual void setBklg(const bklg_t& bklg);
};


#endif // _REQUESTPACKET_M_H_
