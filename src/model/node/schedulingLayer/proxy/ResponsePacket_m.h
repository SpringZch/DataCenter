//
// Generated file, do not edit! Created by opp_msgc 4.3 from model/node/schedulingLayer/proxy/ResponsePacket.msg.
//

#ifndef _RESPONSEPACKET_M_H_
#define _RESPONSEPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "SchedulingPacket.h"
typedef double bklg_t;
typedef double rate_t;
// }}



/**
 * Class generated from <tt>model/node/schedulingLayer/proxy/ResponsePacket.msg</tt> by opp_msgc.
 * <pre>
 * packet ResponsePacket extends SchedulingPacket {
 *     @customize(true);
 *     schedPktType = SCHEDULING_RESPONSE; 
 *     bklg_t share;	
 *     rate_t rate;	
 * }
 * </pre>
 *
 * ResponsePacket_Base is only useful if it gets subclassed, and ResponsePacket is derived from it.
 * The minimum code to be written for ResponsePacket is the following:
 *
 * <pre>
 * class ResponsePacket : public ResponsePacket_Base
 * {
 *   private:
 *     void copy(const ResponsePacket& other) { ... }

 *   public:
 *     ResponsePacket(const char *name=NULL, int kind=0) : ResponsePacket_Base(name,kind) {}
 *     ResponsePacket(const ResponsePacket& other) : ResponsePacket_Base(other) {copy(other);}
 *     ResponsePacket& operator=(const ResponsePacket& other) {if (this==&other) return *this; ResponsePacket_Base::operator=(other); copy(other); return *this;}
 *     virtual ResponsePacket *dup() const {return new ResponsePacket(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from ResponsePacket_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(ResponsePacket);
 * </pre>
 */
class ResponsePacket_Base : public ::SchedulingPacket
{
  protected:
    bklg_t share_var;
    rate_t rate_var;

  private:
    void copy(const ResponsePacket_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ResponsePacket_Base&);
    // make constructors protected to avoid instantiation
    ResponsePacket_Base(const char *name=NULL, int kind=0);
    ResponsePacket_Base(const ResponsePacket_Base& other);
    // make assignment operator protected to force the user override it
    ResponsePacket_Base& operator=(const ResponsePacket_Base& other);

  public:
    virtual ~ResponsePacket_Base();
    virtual ResponsePacket_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class ResponsePacket");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bklg_t& getShare();
    virtual const bklg_t& getShare() const {return const_cast<ResponsePacket_Base*>(this)->getShare();}
    virtual void setShare(const bklg_t& share);
    virtual rate_t& getRate();
    virtual const rate_t& getRate() const {return const_cast<ResponsePacket_Base*>(this)->getRate();}
    virtual void setRate(const rate_t& rate);
};


#endif // _RESPONSEPACKET_M_H_
