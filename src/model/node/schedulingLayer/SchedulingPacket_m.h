//
// Generated file, do not edit! Created by opp_msgc 4.3 from model/node/schedulingLayer/SchedulingPacket.msg.
//

#ifndef _SCHEDULINGPACKET_M_H_
#define _SCHEDULINGPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "DCN_EthPacket.h"
// }}



/**
 * Enum generated from <tt>model/node/schedulingLayer/SchedulingPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum SchedulingPacketTypes 
 * {
 *     SCHEDULING_BACKLOG_REPORT 	= 0;
 *     SCHEDULING_RATE_ASSIGNMENT 	= 1;
 *     SCHEDULING_COMPLETE_BACKLOG	= 2;
 *     SCHEDULING_PKT_ASYNCHRONOUS	= 3;
 *     SCHEDULING_PKT_CHARNY		= 4;
 *     SCHEDULING_PKT_MC			= 5;
 *     SCHEDULING_BKLG_PROP_REQ		= 6;
 *     SCHEDULING_BKLG_PROP_RESP	= 7;
 *     SCHEDULING_REQUEST		 	= 8;
 *     SCHEDULING_RESPONSE		 	= 9;
 * }
 * </pre>
 */
enum SchedulingPacketTypes {
    SCHEDULING_BACKLOG_REPORT = 0,
    SCHEDULING_RATE_ASSIGNMENT = 1,
    SCHEDULING_COMPLETE_BACKLOG = 2,
    SCHEDULING_PKT_ASYNCHRONOUS = 3,
    SCHEDULING_PKT_CHARNY = 4,
    SCHEDULING_PKT_MC = 5,
    SCHEDULING_BKLG_PROP_REQ = 6,
    SCHEDULING_BKLG_PROP_RESP = 7,
    SCHEDULING_REQUEST = 8,
    SCHEDULING_RESPONSE = 9
};

/**
 * Class generated from <tt>model/node/schedulingLayer/SchedulingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet SchedulingPacket extends DCN_EthPacket 
 * {
 *     kind = DCN_SCHEDULING_PACKET; 
 *     unsigned short schedPktType enum(SchedulingPacketTypes); 
 *     dataPacket = false;
 * }
 * </pre>
 */
class SchedulingPacket : public ::DCN_EthPacket
{
  protected:
    unsigned short schedPktType_var;

  private:
    void copy(const SchedulingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SchedulingPacket&);

  public:
    SchedulingPacket(const char *name=NULL, int kind=0);
    SchedulingPacket(const SchedulingPacket& other);
    virtual ~SchedulingPacket();
    SchedulingPacket& operator=(const SchedulingPacket& other);
    virtual SchedulingPacket *dup() const {return new SchedulingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getSchedPktType() const;
    virtual void setSchedPktType(unsigned short schedPktType);
};

inline void doPacking(cCommBuffer *b, SchedulingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SchedulingPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>model/node/schedulingLayer/SchedulingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet BacklogReport extends SchedulingPacket
 * {
 *     schedPktType = SCHEDULING_BACKLOG_REPORT;
 *     unsigned long backlog;
 * }
 * </pre>
 */
class BacklogReport : public ::SchedulingPacket
{
  protected:
    unsigned long backlog_var;

  private:
    void copy(const BacklogReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BacklogReport&);

  public:
    BacklogReport(const char *name=NULL, int kind=0);
    BacklogReport(const BacklogReport& other);
    virtual ~BacklogReport();
    BacklogReport& operator=(const BacklogReport& other);
    virtual BacklogReport *dup() const {return new BacklogReport(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned long getBacklog() const;
    virtual void setBacklog(unsigned long backlog);
};

inline void doPacking(cCommBuffer *b, BacklogReport& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BacklogReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>model/node/schedulingLayer/SchedulingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet RateAssignment extends SchedulingPacket
 * {
 *     schedPktType = SCHEDULING_RATE_ASSIGNMENT;
 *     unsigned long rateAssignment;
 * }
 * </pre>
 */
class RateAssignment : public ::SchedulingPacket
{
  protected:
    unsigned long rateAssignment_var;

  private:
    void copy(const RateAssignment& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RateAssignment&);

  public:
    RateAssignment(const char *name=NULL, int kind=0);
    RateAssignment(const RateAssignment& other);
    virtual ~RateAssignment();
    RateAssignment& operator=(const RateAssignment& other);
    virtual RateAssignment *dup() const {return new RateAssignment(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned long getRateAssignment() const;
    virtual void setRateAssignment(unsigned long rateAssignment);
};

inline void doPacking(cCommBuffer *b, RateAssignment& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RateAssignment& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>model/node/schedulingLayer/SchedulingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet CompleteBacklogReport extends SchedulingPacket
 * {
 * 	schedPktType = SCHEDULING_COMPLETE_BACKLOG;
 * 	unsigned long backlog[];
 * }
 * </pre>
 */
class CompleteBacklogReport : public ::SchedulingPacket
{
  protected:
    unsigned long *backlog_var; // array ptr
    unsigned int backlog_arraysize;

  private:
    void copy(const CompleteBacklogReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CompleteBacklogReport&);

  public:
    CompleteBacklogReport(const char *name=NULL, int kind=0);
    CompleteBacklogReport(const CompleteBacklogReport& other);
    virtual ~CompleteBacklogReport();
    CompleteBacklogReport& operator=(const CompleteBacklogReport& other);
    virtual CompleteBacklogReport *dup() const {return new CompleteBacklogReport(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setBacklogArraySize(unsigned int size);
    virtual unsigned int getBacklogArraySize() const;
    virtual unsigned long getBacklog(unsigned int k) const;
    virtual void setBacklog(unsigned int k, unsigned long backlog);
};

inline void doPacking(cCommBuffer *b, CompleteBacklogReport& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CompleteBacklogReport& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>model/node/schedulingLayer/SchedulingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet AsynchronousSchedulingPacket extends SchedulingPacket
 * {
 *     schedPktType = SCHEDULING_PKT_ASYNCHRONOUS;
 *     unsigned long stampedRate;
 *     bool ubit;
 *     unsigned long backlog;	
 * }
 * </pre>
 */
class AsynchronousSchedulingPacket : public ::SchedulingPacket
{
  protected:
    unsigned long stampedRate_var;
    bool ubit_var;
    unsigned long backlog_var;

  private:
    void copy(const AsynchronousSchedulingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AsynchronousSchedulingPacket&);

  public:
    AsynchronousSchedulingPacket(const char *name=NULL, int kind=0);
    AsynchronousSchedulingPacket(const AsynchronousSchedulingPacket& other);
    virtual ~AsynchronousSchedulingPacket();
    AsynchronousSchedulingPacket& operator=(const AsynchronousSchedulingPacket& other);
    virtual AsynchronousSchedulingPacket *dup() const {return new AsynchronousSchedulingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned long getStampedRate() const;
    virtual void setStampedRate(unsigned long stampedRate);
    virtual bool getUbit() const;
    virtual void setUbit(bool ubit);
    virtual unsigned long getBacklog() const;
    virtual void setBacklog(unsigned long backlog);
};

inline void doPacking(cCommBuffer *b, AsynchronousSchedulingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AsynchronousSchedulingPacket& obj) {obj.parsimUnpack(b);}


#endif // _SCHEDULINGPACKET_M_H_
