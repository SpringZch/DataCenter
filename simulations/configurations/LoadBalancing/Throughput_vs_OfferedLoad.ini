[General]
#include ../omnetpp.ini

repeat = 30
#cmdenv-runs-to-execute = 0..99
warmup-period = 10ms
sim-time-limit = 100ms
cmdenv-express-mode=true

**.vector-recording = true
**.Server_*.scalar-recording = false
**.Switch*.**.scalar-recording = false

# Network parameters
# ------------------------------------------------------------------------
[Config SmallNetworkBase]
network = datacenter.model.networks.fattree.generatedOutsideOmnet.FatTree_4_2_3
FatTree_4_2_3.ServerType = "TrafficSourceServerMinimal"

[Config MediumNetworkBase]
network = datacenter.model.networks.fattree.generatedOutsideOmnet.FatTree_8_4_3
FatTree_8_4_3.ServerType = "TrafficSourceServerMinimal"

[Config LargeNetworkBase]
network = datacenter.model.networks.fattree.generatedOutsideOmnet.FatTree_16_8_3
FatTree_16_8_3.ServerType = "TrafficSourceServerMinimal"

[Config ThroughputVsOfferedLoadBase] 
description = "Basic Throughput Vs Offered Load Configuration"
experiment-label="ThroughputVsOfferedLoadBase"
#extends = LargeNetworkBase
#extends = MediumNetworkBase
extends = SmallNetworkBase

# Server parameters
# ------------------------------------------------------------------------
# Application parameters

**.ApplicationType = "MessageApplication"
#**.application.sendTimeLimit = 11ms
**.Server_*.application.**.scalar-recording = true
#**.Server_*.application.**.vector-recording = true
**.Server_*.linkLayer.port_queue.setTimestamp = true
**.randomStartTimes = true
**.messageSize = 10 MiB

**.maxSendRate = ${rate=0.0001, 0.05..0.8 step 0.05, 0.8..1 step 0.01}*1 Gbps
#**.payloadSize = ${ payloadSize = -1 bytes, 713 bytes, -2 bytes, -3 bytes} # -2 = max, -1 = min, -3 = random, 713 should be avg. payload size
**.payloadSize = ${ payloadSize = 713 bytes, -2 bytes, -3 bytes, -4 bytes} # -2 = max, -1 = min, -3 = random, 713 should be avg. payload size
#**.payloadSize = ${ payloadSize = -1 bytes, 713 bytes, -2 bytes, -3 bytes, -4 bytes} # -2 = max, -1 = min, -3 = random, 713 should be avg. payload size
#**.avgBurstLength = ${ avgBurstLength = 0s , 1ms}
**.avgTimeBetweenBursts = ${ avgTimeBetweenBursts = 0s }#, 5ms} # either this or avgBurstLength
**.burstyInjectionRate = 1 # Fraction of the server's send rate
**.randomInterArrival = ${ randomInterArrivals = true} # false produces uniform spacing between packets
# We don't want to use the sendTimeLimit because we don't want to include packets that are still
# in the network after the measurement interval. 
#**.sendTimeLimit = 101ms
#**.simTimeLimit = 100ms
**.recordStreamStatistics = true
**.useHardcodedStreamStatistics = false
**.messageScript = "${resultdir}/run_${runnumber}_script.txt"
**.scriptGenType = "PairedPermutationTraffic"

# LinkLayer parameters
**.LinkLayerType = "LinkLayer"
**.LoadBalancerType = "ECMPLoadBalancer"
**.Server_*.linkLayer.measureBandwidth = false

# ServerQueue parameters
# infinite queues
#**.Server*.linkLayer.port_queue.queueSizePackets=8192
#**.Server*.linkLayer.port_queue.queueSizeBytes=688128 bytes # Helps keep the total memory down
**.Server*.linkLayer.port_queue.queueSizeBytes=32KiB

# Switch parameters
#**.Switch*.queueSizePackets = 1000
**.Switch*.queueSizeBytes = 32KiB # Ranges to evaluate would be 32KB to 1024KB per-port (Measurement and Analysis of TCP Throughput Collapse in Cluster-based Storage Systems)

# Statistics
**.streamRxBytes.result-recording-modes=all
**.streamTxBytes.result-recording-modes=all
**.streamRxLatency.result-recording-modes=all

[Config ECMPLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType = "ECMPLoadBalancer"

[Config VLBLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType = "VLBLoadBalancer"

[Config RRLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType = "RRLoadBalancer"

[Config PRRLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType = "PRRLoadBalancer"

[Config SDLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType= "SDLoadBalancer"
**.quantum = 15000 bytes # Doesn't matter what this is

[Config PSDLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType= "PSDLoadBalancer"
**.quantum = 15000 bytes # Change order in which ties are broken no fewer than every 10 rounds

[Config SRRLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType = "SRRLoadBalancer"
#**.quantum = ${quantum = 787} bytes # 1426/2 = 713 is avg payload, 713+74 = 787 avg pkt size on wire
**.quantum = ${quantum = 84, 787, 1500, 15000} bytes

#[Config PSRRLoadBalancer]
#extends = SRRLoadBalancer
#**.LoadBalancerType= "PSRRLoadBalancer"

#[Config RehashLoadBalancer]
#extends = SRRLoadBalancer
#**.LoadBalancerType = "RehashLoadBalancer"


[Config MPLoadBalancer]
extends = ThroughputVsOfferedLoadBase
**.LoadBalancerType= "MPLoadBalancer"
**.quantum = 15000 bytes # Doesn't matter what this is
